version: '3.8'

services:
  redis:
    image: redis
    container_name: my_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: logstash
    volumes:
      - ./collecte/api/elk/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "6000:6000"
      - "9600:9600"
    networks:
      - my_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch: 
        condition: service_healthy
    networks:
      - my_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-postgres:
    image: postgres:13
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow_db
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 10

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    image: custom_airflow:latest
    container_name: airflow_init
    user: "0:0"
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow_db
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: "True"
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Alla --lastname Niang --role Admin --email admin@example.com
      "
    volumes:
      - ./collecte/api/airflow/dags:/opt/airflow/dags
      - ./collecte/api/airflow/logs:/opt/airflow/logs
      - ./collecte/api/kafka:/opt/airflow/kafka
      - ./collecte/api:/opt/airflow/scripts
    networks:
      - my_network

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_webserver
    image: custom_airflow:latest
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow_db
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: "True"
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
    volumes:
      - ./collecte/api/airflow/dags:/opt/airflow/dags
      - ./collecte/api/airflow/logs:/opt/airflow/logs
      - ./collecte/api/kafka:/opt/airflow/kafka
      - ./collecte/api:/opt/airflow/scripts
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - my_network
    restart: unless-stopped

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    image: custom_airflow:latest
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow_db
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: "True"
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
    volumes:
      - ./collecte/api/airflow/dags:/opt/airflow/dags
      - ./collecte/api/airflow/logs:/opt/airflow/logs
      - ./collecte/api/kafka:/opt/airflow/kafka
      - ./collecte/api/py_spark:/opt/airflow/py_spark
      - ./collecte/api:/opt/airflow/scripts
    command: scheduler
    networks:
      - my_network
    restart: unless-stopped

  namenode:
    image: apache/hadoop:3
    hostname: namenode
    command: ["hdfs", "namenode"]
    ports:
      - "9870:9870"
    env_file:
      - ./config
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    networks:
      - my_network
    volumes:
      - namenode-data:/hadoop/dfs/name

  datanode:
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    env_file:
      - ./config
    networks:
      - my_network
    volumes:
      - datanode-data:/hadoop/dfs/data

  resourcemanager:
    image: apache/hadoop:3
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
      - "8088:8088"
    env_file:
      - ./config
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
      - my_network

  nodemanager:
    image: apache/hadoop:3
    command: ["yarn", "nodemanager"]
    env_file:
      - ./config
    networks:
      - my_network
  
  hdfs-client:
    image: apache/hadoop:3
    container_name: hdfs-client
    command: ["bash"]
    tty: true
    stdin_open: true
    depends_on:
      - namenode
      - datanode
    networks:
      - my_network

  spark:
    image: bitnami/spark:3.3.1
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark
      - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    ports:
      - "4040:4040"
      - "8090:8080"
    depends_on:
      - namenode
      - resourcemanager
    volumes:
      - ./collecte/api/py_spark:/app
    networks:
      - my_network

volumes:
  redis_data:
  esdata:
  airflow_postgres_data:
  namenode-data:
  datanode-data:

networks:
  my_network:
    driver: bridge
